{"version":3,"sources":["config/axios.js","components/CrearCliente.js","components/Cliente.js","components/ListaClientes.js","App.js","serviceWorker.js","index.js"],"names":["clienteAxios","axios","create","baseURL","CrearCliente","props","useState","nombre","email","cliente","setCliente","mostrar","mensaje","claseCSS","alerta","setAlerta","className","class","role","onSubmit","e","preventDefault","trim","post","history","push","error","console","log","type","placeholder","name","value","onChange","target","Cliente","ListaClientes","clientes","setClientes","useEffect","a","get","resultado","data","consultarAPI","scope","length","map","key","id","App","basename","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7646a60f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst clienteAxios = axios.create({\r\n    baseURL: 'https://apiclients.herokuapp.com/api'\r\n});\r\n\r\nexport default clienteAxios;","import React, { useState } from \"react\";\r\nimport clienteAxios from \"../config/axios\";\r\n\r\nconst CrearCliente = (props) => {\r\n  const [cliente, setCliente] = useState({\r\n    nombre: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const [alerta, setAlerta] = useState({\r\n    mostrar: false,\r\n    mensaje: \"\",\r\n    claseCSS: \"\",\r\n  });\r\n\r\n  const { nombre, email } = cliente;\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (nombre.trim() === \"\" || email.trim === \"\") {\r\n      setAlerta({\r\n        mostrar: true,\r\n        mensaje: \"los campos son obligatorios\",\r\n        claseCSS: \"alert-danger\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      clienteAxios.post(\"/clientes\", cliente);\r\n      setAlerta({\r\n        mostrar: true,\r\n        mensaje: \"Se registr√≥ cliente correctamente\",\r\n        claseCSS: \"alert-success\",\r\n      });\r\n      props.history.push(\"/\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      setAlerta({\r\n        mostrar: true,\r\n        mensaje: \"Hubo un error\",\r\n        claseCSS: \"alert-danger\",\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row justify-content-center mt-5\">\r\n      <div className=\"col-md-8\">\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h2 className=\"text-center mb-4 font-weight-bold\">\r\n              Agregar un nuevo cliente\r\n            </h2>\r\n            {alerta ? (\r\n              <div class={`alert ${alerta.claseCSS}`} role=\"alert\">\r\n                {alerta.mensaje}\r\n              </div>\r\n            ) : null}\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <label>Nombre</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre del cliente\"\r\n                  name=\"nombre\"\r\n                  value={nombre}\r\n                  onChange={(e) =>\r\n                    setCliente({ ...cliente, [e.target.name]: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={(e) =>\r\n                    setCliente({ ...cliente, [e.target.name]: e.target.value })\r\n                  }\r\n                />\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary font-weight-bold text-uppercase d-block w-100\"\r\n              >\r\n                Guardar\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrearCliente;\r\n","import React from \"react\";\r\n\r\nconst Cliente = ({ cliente }) => {\r\n  const { nombre, email } = cliente;\r\n  return (\r\n      <tr>\r\n        <td>{nombre}</td>\r\n        <td>\r\n          <span className=\"font-weight-bold\">{email}</span>\r\n        </td>\r\n      </tr>\r\n  );\r\n};\r\n\r\nexport default Cliente;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport clienteAxios from \"../config/axios\";\r\nimport Cliente from \"./Cliente\";\r\n\r\nconst ListaClientes = () => {\r\n  \r\n  const [ clientes, setClientes] = useState([]);\r\n  useEffect(() => {\r\n    const consultarAPI = async () => {\r\n      const resultado = await clienteAxios.get(\"/clientes\");\r\n      setClientes(resultado.data.clientes)\r\n    };\r\n    consultarAPI();\r\n  }, []);\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container\">\r\n        <h2 className=\"text-center my-5\">Listado de clientes</h2>\r\n        <table className=\"table table-striped\">\r\n          <thead className=\"bg-primary table-dark\">\r\n            <tr>\r\n              <th scope=\"col\">Nombre</th>\r\n              <th scope=\"col\">email</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {clientes.length === 0\r\n              ? \"No hay clientes\"\r\n              : clientes.map((cliente) => (\r\n                  <Cliente key={cliente.id} cliente={cliente} />\r\n                ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ListaClientes;\r\n","import React, { useState } from \"react\";\nimport { HashRouter, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport CrearCliente from \"./components/CrearCliente\";\nimport ListaClientes from \"./components/ListaClientes\";\n\nfunction App() {\n  const [clientes, setClientes] = useState([]);\n\n  return (\n    <HashRouter basename=\"/\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <a class=\"navbar-brand text-light\"><Link to=\"/\">Clientes</Link></a>\n        <a className=\"nav-link\"><Link to=\"/cliente\" className=\"\">\n          Crear cliente\n        </Link></a>\n      </nav>\n      <Switch>\n        <Route exact path=\"/cliente\" component={CrearCliente} />\n        <Route exact path=\"/\" component={ListaClientes} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}